{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Looking for a centralized hub to manage all your flight reservations seamlessly? Look no further! Introducing our Flight Management REST API service \u2014 your ultimate solution! With our service, you gain the power to effortlessly track, modify, and update your reservations whenever you need.</p> <p>Ready to take flight with our API? Glance through the following information to get started.</p> <p></p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>About - The Flight Management API at a glance.</li> <li>Quick start - jump start your journey with our API.</li> <li>Usecases - check out the real-world situations where you can apply this API.</li> </ul>"},{"location":"#first-steps","title":"First steps","text":"<p>Follow these step-by-step instructions to get started. You only have to do this one time per development system.</p> <ol> <li>Set up the environment</li> <li>Create or import Postman collection</li> <li>Set up the Base URL</li> <li>Make your first API call</li> </ol>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Explore how to do the common tasks using this API.</p> <p>First, make sure you have set up your development system.</p> <p>After your system is ready, these tutorials show you how to perform common tasks.</p> <ul> <li>Add a new reservation</li> <li>Show all reservations</li> <li>Delete a reservation by ID</li> <li>Update travel type for a reservation</li> </ul>"},{"location":"#api-reference-resources","title":"API Reference resources","text":"<p>The API reference documentation offers comprehensive details about the resources, operations, and tips to troubleshoot errors:</p> <ul> <li>Passengers resource</li> <li>Flights resource</li> <li>Reservation resource</li> <li>Glance the endpoints, URLs, and methods</li> <li>Error handling</li> </ul>"},{"location":"#contact-us","title":"Contact us","text":"<p>For any questions, feedback or to learn more about our API service:</p> <ul> <li>write to us flywithus@flightmgmt.com.</li> </ul>"},{"location":"overview/overview/","title":"About the Flight Management API","text":"<p>The Flight Management API service provides a comprehensive solution for managing flights, passengers, and reservations efficiently. With this API, users can seamlessly access and manipulate data related to flights, passengers, and their reservations.</p>"},{"location":"overview/overview/#how-does-this-api-service-work","title":"How does this API service work?","text":"<p>Here\u2019s a \"Hello World\" example to demonstrate how the Flight Management API service works.</p> <p>Scenario: Let's say you want to retrieve a list of all flights using the Flight Management API.</p> <p>HTTP Method: GET</p> <p>Our Flight Management API uses HTTP Methods for handling requests and responses. The HTTP GET method works by sending a request to the Flight Management API, which then retrieves and returns a list of flights. You can specify parameters such as date, destination, and airline to filter the results.</p>"},{"location":"overview/overview/#technical-specifications","title":"Technical Specifications","text":"<p>The Flight Management API needs the following components to operate.</p> <ul> <li>Node.js v20.14.0</li> <li>Json-server 1.0.0-beta.1</li> <li>CURL</li> </ul> <p>Note: The devlopment system instructions are tested on Windows operating system.</p> <p>To explore further, take a look at the First Steps.  </p>"},{"location":"overview/overview/#api-security","title":"API Security","text":"<p>There is no authentication and authorization. You can try our API endpoints \"as is\".</p>"},{"location":"overview/overview/#quick-test","title":"Quick test","text":"<p>Are you a seasoned developer? You can jump right in and test this API using these steps.</p> <p>This task can take up to 10 minutes.  </p> <p>Follow these steps for testing your first call in Windows development system:  </p> <ol> <li>Install components: Download and install the technical specifications.</li> <li>Access the API endpoints: Fork the repo.</li> <li> <p>Start server: Go to command-line prompt and start the json-server:</p> <pre><code>  cd &lt;your GitHub repo workspace&gt;\n  cd flight-management-service\n  cd api\n  cd start-server.bat\n</code></pre> </li> <li> <p>Make your first API call: Open another command-line window and submit the following request to retrieve a list of flights.</p> <p>Sample request:</p> <pre><code>http://localhost:3000/reservations\n</code></pre> <p>Sample response:</p> <pre><code>  {\n    \"id\": \"B1001\",\n    \"flightId\": [\n      \"FL123\"\n    ],\n    \"passengerId\": \"P001\",\n    \"seatNumber\": \"12A\",\n    \"reservationStatus\": \"Confirmed\",\n    \"purpose\": \"personal\"\n  },\n  {\n    \"id\": \"B1002\",\n    \"flightId\": [\n      \"FL124\"\n    ],\n    \"passengerId\": \"P001\",\n    \"seatNumber\": \"18B\",\n    \"reservationStatus\": \"Confirmed\",\n    \"purpose\": \"business\"\n  },\n  {\n    \"id\": \"B1003\",\n    \"flightId\": [\n      \"FL125\"\n    ],\n    \"passengerId\": \"P002\",\n    \"seatNumber\": \"22C\",\n    \"reservationStatus\": \"Confirmed\",\n    \"purpose\": \"business\"\n  },\n  {\n    \"id\": \"B1005\",\n    \"flightId\": [\n      \"FL126\"\n    ],\n    \"passengerId\": \"P004\",\n    \"seatNumber\": \"10A\",\n    \"reservationStatus\": \"Confirmed\",\n    \"purpose\": \"personal\"\n  },\n  {\n    \"id\": \"B1004\",\n    \"flightId\": [\n      \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\"\n  }\n</code></pre> </li> </ol>"},{"location":"overview/overview/#supported-endpoints","title":"Supported endpoints","text":"<p>This version supports the following endpoints and operations:</p> Method Operation GET Retrieve all reservations. CREATE Add reservation. GET Retrieve all passengers. PATCH Modify the existing reservation record by ID. DELETE Delete reservation by id."},{"location":"overview/overview/#related-information","title":"Related information","text":"<ul> <li>Tutorials</li> </ul>"},{"location":"overview/real-world-situations/","title":"Real-world use cases of this API","text":"<p>Are you a travel agent or a frequent flyer trying to manage all your bookings? Or, are you a developer eager to explore the possibilities of this API? Here are practical scenarios where the Flight Management API service can be applied:</p> <ul> <li> <p>Flight Management: Access detailed information about flights, including flight ID, airline, origin, destination, departure time, including and arrival time. Users can retrieve essential including flight details to track schedules effectively.</p> </li> <li> <p>Passenger Management: Obtain passenger details such as passenger ID, first name, last name, date of birth (DOB), passport number, and first nationality. This feature enables users to maintain a first database of passengers and their personal information securely.</p> </li> <li> <p>Reservation Handling: Manage flight reservations effortlessly by accessing reservation details, reservation ID, flight ID, passenger ID, seat number, reservation status, and the purpose of travel.</p> </li> </ul>"},{"location":"overview/real-world-situations/#related-information","title":"Related information","text":"<ul> <li>Reference</li> </ul>"},{"location":"quick-start/before-you-start-a-tutorial/","title":"Before you  start a tutorial","text":"<p>These are the steps you must do before you can run the tutorials for the Flight Management API service.</p> <p>Expect this preparation to take about 20 minutes to complete.</p>"},{"location":"quick-start/before-you-start-a-tutorial/#preparing-for-the-tutorials","title":"Preparing for the tutorials","text":"<p>The following instructions describe how to prepare for running the tutorials on Windows.</p> <ul> <li>A GitHub account</li> <li>A development system (PC, Mac, or Linux) running a current or long-term support (LTS version of the operating system).</li> <li>The following software on your development system:</li> <li>(Optional) Git (for the command line).</li> <li>GitHub Desktop.<ul> <li>A fork of the Flight-Management-service repo.</li> <li>A current copy of the Flight Management database file. You can get this by syncing your fork.</li> <li>After forking the repo from GitHub, go to the forked clone on your local machine.</li> <li>Go to api.</li> <li>Check for the flights-db-source.json file.</li> <li>TIP: If you're using a fork of the repo, create a working branch in which you test the API endpoints. Create a new branch for each test/tutorial to prevent a mistake in one from affecting your work in another.</li> </ul> </li> <li>A current/LTS version of node.js.</li> <li>A current version of json-server.</li> <li>A current version of CURL. By default, CURL is mounted in Windows operating system.</li> <li>The Postman desktop app. Because you run the Flight-Management service on your development system with an <code>http://localhost</code> hostname, the web-version of Postman can't perform the exercises.</li> </ul>"},{"location":"quick-start/before-you-start-a-tutorial/#test-your-development-system","title":"Test your development system","text":"<p>To test your development system, follow these steps:</p> <ol> <li> <p>Check your json-server version.</p> <p><pre><code>C:\\&gt; json-server --version\n</code></pre> This will display the installed json-server version.</p> <pre><code>1.0.0-alpha.23\n</code></pre> </li> <li> <p>Check your Node.js version.     <pre><code>C:\\&gt; node -v\nv20.13.0\n\nOR\n\nC:\\&gt; node --version\nv20.13.0\n</code></pre>     This will display the installed Node.js version.</p> <pre><code>v20.13.0\n</code></pre> </li> <li> <p>Create and checkout a test branch of your fork of the Flight Management service repo. Your <code>GitHub repo workspace</code> is the directory that contains your fork of the <code>flight-management-service</code> repo.</p> <p><pre><code>cd &lt;your GitHub repo workspace&gt;\ncd flight-management-service\ncd api\ncd start-server.bat\n</code></pre> 1. To watch your server, type the following command: </p> <p><code>shell C:\\flight-management-service\\api&gt; json-server -w flights-db-source.json</code>    If your development system is installed correctly, you should see    the service start and display the URL of the service: <code>http://localhost:3000</code>.</p> <pre><code>--watch/-w can be omitted, JSON Server 1+ watches for file changes by default\nJSON Server started on PORT :3000\nPress CTRL-C to stop\nWatching flights-db-source.json...\n\n( \u02f6\u02c6 \u15dc \u02c6\u02f5 )\n\nIndex:\nhttp://localhost:3000/\n\nStatic files:\nServing ./public directory if it exists\n\nEndpoints:\nhttp://localhost:3000/flights\nhttp://localhost:3000/passengers\nhttp://localhost:3000/reservations\n</code></pre> </li> <li> <p>Make a test call to the service.</p> <pre><code>curl http://localhost:3000/passengers\n</code></pre> </li> <li> <p>If the service is running correctly, you should see a list of users from the service, such as in this example.</p> <pre><code>  {\n    \"email\": \"doejoe@abc.com\",\n    \"id\": \"P001\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"dob\": \"1985-10-10\",\n    \"passportNumber\": \"A12345678\",\n    \"nationality\": \"USA\"\n  },\n  {\n    \"id\": \"P002\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"dob\": \"1990-03-25\",\n    \"passportNumber\": \"B87654321\",\n    \"nationality\": \"Canada\"\n  }\n</code></pre> </li> </ol> <p>If you don't see the list of passengers, or receive an error in any step of the procedure, investigate and correct the error before continuing. Some common situations that cause errors include:</p> <ul> <li>You mistyped a command.</li> <li>You aren't in the correct directory.</li> <li>A required software component didn't install correctly.</li> <li>A required software component isn't up to date.</li> </ul> <p>If you see the list of passengers from the service, you're ready to do the tutorials.</p>"},{"location":"quick-start/before-you-start-a-tutorial/#next-steps","title":"Next steps","text":"<ul> <li>Create or import Postman collection.</li> </ul>"},{"location":"quick-start/create-postman-collection/","title":"Create API collection","text":"<p>Create new HTTP methods or import the existing collection from the forked repo.</p>"},{"location":"quick-start/create-postman-collection/#step-1-open-postman","title":"Step 1: Open Postman","text":"<p>Launch the Postman application on your computer.</p>"},{"location":"quick-start/create-postman-collection/#step-2-inherit-the-postman-collection","title":"Step 2: Inherit the Postman Collection","text":"<p>Click Import and upload the collection from your cloned repository.</p>"},{"location":"quick-start/create-postman-collection/#step-3-optional-create-a-new-collection","title":"Step 3: (Optional) Create a New Collection","text":"<p>If you don't have an existing collection, you can create a new one by clicking on the New button in the top-left corner of the Postman interface and selecting \"Collection\".</p>"},{"location":"quick-start/create-postman-collection/#step-4-create-a-new-request","title":"Step 4: Create a New Request","text":"<p>Inside the collection you just created, click on the Add Request button to create a new request.</p>"},{"location":"quick-start/create-postman-collection/#step-5-add-requests","title":"Step 5: Add requests","text":"<p>Repeat step 3 for as many requests you want to create and save all the requests within the collection.</p>"},{"location":"quick-start/create-postman-collection/#next-steps","title":"Next steps","text":"<ul> <li>Set up base URL in Postman.</li> </ul>"},{"location":"quick-start/env-postman/","title":"Set up URL in Postman","text":""},{"location":"quick-start/env-postman/#step-1-configure-the-base-url-variable","title":"Step 1: Configure the Base URL variable","text":"<ol> <li>In the request pane, click on the Params tab.</li> <li>Click on Add Param button.</li> <li>Choose URL from the dropdown menu.</li> <li>Enter a name for your variable, e.g., <code>baseURL</code>.</li> <li>Enter the base URL for your API, e.g., <code>http://localhost:3000</code>.</li> <li>Click Save.  </li> </ol>"},{"location":"quick-start/env-postman/#step-2-use-the-base-url-variable-in-requests","title":"Step 2: Use the Base URL variable in requests","text":"<p>Now, whenever you create a new request within this collection, you can use the <code>baseURL</code> variable as part of your URL. For example, if you want to make a request to <code>http://localhost:3000/passengers</code>, you can simply use <code>{{baseURL}}/passengers</code> as your request URL.</p>"},{"location":"quick-start/env-postman/#step-3-optional-configure-environment-variables","title":"Step 3: (Optional) Configure environment variables","text":"<p>If you want to use different <code>base URLs</code> for different environments (e.g., development, staging, production), you can create environment variables:</p> <ol> <li>Click on the gear icon in the top-right corner of the Postman interface. </li> <li>To create a new environment, click Add.</li> <li>Enter a name for your environment, e.g., \"Development\".</li> <li>Add a variable called baseURL and set its value to the base URL for your development environment, e.g., https://dev.api.example.com.</li> <li>Click Add and save the environment.</li> </ol>"},{"location":"quick-start/env-postman/#step-4-switch-environments","title":"Step 4: Switch environments","text":"<p>You can switch between environments using the dropdown menu in the top-right corner of the Postman interface. When you switch to a different environment, Postman will automatically use the corresponding base URL variable for your requests.</p> <p>That's it! You've now set up base URL variables in Postman. This will make it easier to manage your API requests, especially when working with multiple environments.</p>"},{"location":"quick-start/env-postman/#next-steps","title":"Next steps","text":"<ul> <li>Make your first API call.</li> </ul>"},{"location":"quick-start/make-your-first-api-call/","title":"Make your first API call","text":"<p>Let us try adding a new reservation to the Flight Management database.</p>"},{"location":"quick-start/make-your-first-api-call/#prerequisites","title":"Prerequisites","text":"<ol> <li>The <code>json-server</code> is up and running.</li> <li>You have installed the Postman Desktop application.</li> <li>The Postman request collection setup is complete.</li> </ol> <p>If you need help with the prerequisites, refer to the before-you-start-a-tutorial section.</p>"},{"location":"quick-start/make-your-first-api-call/#about-this-task","title":"About this task","text":"<p>To add a new reservation follow these steps:</p> <ol> <li>Open Postman.</li> <li>Select POST method.</li> <li>Enter <code>{{baseUrl}}/reservations</code>.</li> <li>In the Body tab, create the following properties for a new reservation and submit your request:</li> </ol> Property name Type Description <code>id</code> string (Required) Unique identifier of the reservation. <code>flightId</code> string (Required) Unique identifier of the flight. <code>passengerId</code> string (Required) The passenger's Id. <code>seatNumber</code> string (Required) The passenger's seat information. <code>reservationStatus</code> string (Optional) The status of the booking. <code>purpose</code> string (Optional) Type of travel. <p>Here's how a sample request may look like, you can :</p> <pre><code>  {\n\n    \"flightId\": [\n      \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\"\n\n\n  }\n ```\n\n Here's a sample response: of all reservations:\n\n```json\n{\n    \"id\": \"df6e\",\n    \"flightId\": [\n        \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\"\n}\n</code></pre> <p>NOTE: The response automatically generates an \"id\" for each new reservation. This id is unique and associated with the passenger's information.</p>"},{"location":"quick-start/make-your-first-api-call/#next-step","title":"Next step","text":"<ul> <li>Get started with our tutorials</li> </ul>"},{"location":"quick-start/make-your-first-api-call/#related-information","title":"Related information","text":"<ul> <li>Error handling</li> </ul>"},{"location":"reference/endpoints/","title":"Supported endpoints, methods, and URL","text":"<p>The following table shows the list of operations offered by this service:</p> Method Operation GET Retrieve all reservations. GET Retrieve all passengers. PATCH Modify the existing reservation record by ID. DELETE Delete reservation by id."},{"location":"reference/error-handling/","title":"Handling Errors in the Flight Management API Service","text":"<p>The Flight Management service API follows standard HTTP status codes to indicate the success or failure of an API call. Here is an overview of common HTTP status codes and their meanings, along with typical reasons for each code.</p> <p>Operations that execute successfully will return <code>2xx</code> codes. Operations that result in an error due to a problem on the client's side, such as invalid input, will return standard <code>4xx</code> codes. Operations that result in an error due to a problem with the server will return <code>5xx</code> codes.</p>"},{"location":"reference/error-handling/#http-status-code-summary","title":"HTTP Status Code Summary","text":"<p>This section summarizes the most frequent HTTP status codes returned by the API and describes their common causes.</p> HTTP Status Code Status Text Description Common Causes 200 OK The request succeeded. The exact result depends on the HTTP method used. With <code>GET</code>, the requested resource is returned. With <code>POST</code>, a new resource is created or updated. N/A 400 Bad Request The request was unacceptable, often due to missing a required parameter or malformed request body. Missing required parameters, malformed JSON, or invalid data formats. 404 Not Found The requested resource does not exist. Incorrect endpoint URL, attempting to access non-existent resources, or typo in the request. 405 Method Not Allowed The HTTP method used is not supported by the endpoint. Using an inappropriate HTTP method, like sending <code>GET</code> instead of <code>POST</code>, or trying to delete where only updates are allowed. 500 Internal Server Error The server encountered an unexpected condition that prevented it from fulfilling the request. A generic server-side issue, such as a crash, unhandled exceptions, or resource constraints. 503 Service Unavailable The server cannot handle the request. Server is temporary overloaded or insufficient resources to process the request. No Status code ECONNREFUSED The service refused the connection. The service is offline, or you're connecting to the wrong port or hostname. Check if the service is running and try again with the correct port/hostname."},{"location":"reference/operations/passengers-get-all-passengers/","title":"Get all passengers","text":""},{"location":"reference/operations/passengers-get-all-passengers/#url","title":"URL","text":"<p><pre><code>{{baseUrl}}/passengers\n</code></pre> Gets a list of all passengers.</p>"},{"location":"reference/operations/passengers-get-all-passengers/#params","title":"Params","text":"<p>None</p>"},{"location":"reference/operations/passengers-get-all-passengers/#request-headers","title":"Request headers","text":"<p>None</p>"},{"location":"reference/operations/passengers-get-all-passengers/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/operations/passengers-get-all-passengers/#sample-response","title":"Sample Response","text":"<pre><code>[\n    [\n    {\n        \"email\": \"doejoe@abc.com\",\n        \"id\": \"P001\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"dob\": \"1985-10-10\",\n        \"passportNumber\": \"A12345678\",\n        \"nationality\": \"USA\"\n    },\n    {\n        \"id\": \"P002\",\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Smith\",\n        \"dob\": \"1990-03-25\",\n        \"passportNumber\": \"B87654321\",\n        \"nationality\": \"Canada\"\n    },\n    {\n        \"id\": \"P003\",\n        \"firstName\": \"Carlos\",\n        \"lastName\": \"Garcia\",\n        \"dob\": \"1982-07-14\",\n        \"passportNumber\": \"C23456789\",\n        \"nationality\": \"Mexico\"\n    },\n    {\n        \"id\": \"P004\",\n        \"firstName\": \"Liu\",\n        \"lastName\": \"Wei\",\n        \"dob\": \"1978-12-01\",\n        \"passportNumber\": \"D98765432\",\n        \"nationality\": \"China\"\n    },\n    {\n        \"id\": \"H4e1\",\n        \"passengerId\": \"P0026\",\n        \"firstName\": \"Ruba\",\n        \"lastName\": \"Yuk\",\n        \"dob\": \"1995-02-10\",\n        \"passportNumber\": \"B129340238\",\n        \"nationality\": \"Italy\"\n    }\n]\n]\n</code></pre>"},{"location":"reference/operations/passengers-get-all-passengers/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully 404 Error Specified record not found ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/operations/reservation-delete-reservation-by-id/","title":"Delete reservation by ID","text":""},{"location":"reference/operations/reservation-delete-reservation-by-id/#method","title":"Method","text":"<pre><code>DELETE\n</code></pre> <p>Deletes a reservation resource specified by the <code>id</code> parameter, if it exists.</p>"},{"location":"reference/operations/reservation-delete-reservation-by-id/#url","title":"URL","text":"<pre><code>{{baseUrl}}/reservations/id\n</code></pre> Parameter name Type Description <code>id</code> number The ID of a reservation that you want to delete. <p>For example:</p> <pre><code>{{baseUrl}}/reservations/B1004\n</code></pre>"},{"location":"reference/operations/reservation-delete-reservation-by-id/#params","title":"Params","text":"<p>None</p>"},{"location":"reference/operations/reservation-delete-reservation-by-id/#request-headers","title":"Request headers","text":"<p>None</p>"},{"location":"reference/operations/reservation-delete-reservation-by-id/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/operations/reservation-delete-reservation-by-id/#return-body","title":"Return body","text":"<p>None</p>"},{"location":"reference/operations/reservation-delete-reservation-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Resource deleted successfully 404 Error Specified task  not found ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/operations/reservations-create-reservation/","title":"Create reservation","text":""},{"location":"reference/operations/reservations-create-reservation/#layout-page","title":"layout: page","text":""},{"location":"reference/operations/reservations-create-reservation/#method","title":"METHOD","text":"<pre><code>POST\n</code></pre> <p>Creates a new <code>reservation</code> for a passenger. The request body contains the new reservation details.</p>"},{"location":"reference/operations/reservations-create-reservation/#url","title":"URL","text":"<pre><code>{{server_url}/reservations\n</code></pre>"},{"location":"reference/operations/reservations-create-reservation/#request-headers","title":"Request headers","text":"<p>No headers required.</p>"},{"location":"reference/operations/reservations-create-reservation/#request-body","title":"Request body","text":"<p>You must specify the required properties for the new reservation.  In the request body, specify a JSON representation of the <code>reservation</code> object. The following table lists the properties that are required when you create a reservation.</p> Property Description Type passengerId (Required) The unique identifier of the passenger to whom the reservation is assigned. integer seatNumber (Required) Seat number string reservationStatus (Optional) Indicates the status of your booking. string purpose (Optional) The due date of the task. string flightId (Required) Indicates the flight number. string"},{"location":"reference/operations/reservations-create-reservation/#sample-request","title":"Sample request","text":"<p>The POST body should look something like this. You can change the values of each property as you would like.</p> <pre><code>[\n  {\n    \"id\": \"B1004\",\n    \"flightId\": [\n      \"FL126\"\n    ],\n    \"passengerId\": \"P0026\",\n    \"seatNumber\": \"10D\",\n    \"reservationStatus\": \"Booked\",\n    \"purpose\": \"personal\"\n  }\n]\n</code></pre>"},{"location":"reference/operations/reservations-create-reservation/#response-body","title":"Response body","text":"<p>The following example shows the response. *Note that the response automatically creates and assigns an id = B1004 for each successful request.</p> <pre><code>[\n{\n    \"id\": \"B1004\",\n    \"flightId\": [\n        \"FL126\"\n    ],\n    \"passengerId\": \"P0026\",\n    \"seatNumber\": \"10D\",\n    \"reservationStatus\": \"Booked\",\n    \"purpose\": \"personal\"\n}\n]\n</code></pre>"},{"location":"reference/operations/reservations-create-reservation/#return-status","title":"Return status","text":"Status value Return status Description 201 Created Reservation data created successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/operations/reservations-get-all-reservations/","title":"Get all reservations","text":""},{"location":"reference/operations/reservations-get-all-reservations/#method","title":"Method","text":"<pre><code>GET\n</code></pre> <p>Gets a list of all reservations.</p>"},{"location":"reference/operations/reservations-get-all-reservations/#url","title":"URL","text":"<pre><code>{{baseUrl}}/reservations\n</code></pre>"},{"location":"reference/operations/reservations-get-all-reservations/#params","title":"Params","text":"<p>None</p>"},{"location":"reference/operations/reservations-get-all-reservations/#request-headers","title":"Request headers","text":"<p>None</p>"},{"location":"reference/operations/reservations-get-all-reservations/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/operations/reservations-get-all-reservations/#sample-response","title":"Sample Response","text":"<pre><code>[\n [\n    {\n        \"id\": \"B1001\",\n        \"flightId\": [\n            \"FL123\"\n        ],\n        \"passengerId\": \"P001\",\n        \"seatNumber\": \"12A\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"personal\"\n    },\n    {\n        \"id\": \"B1002\",\n        \"flightId\": [\n            \"FL124\"\n        ],\n        \"passengerId\": \"P001\",\n        \"seatNumber\": \"18B\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"business\"\n    },\n    {\n        \"id\": \"B1003\",\n        \"flightId\": [\n            \"FL125\"\n        ],\n        \"passengerId\": \"P002\",\n        \"seatNumber\": \"22C\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"business\"\n    },\n    {\n        \"id\": \"B1005\",\n        \"flightId\": [\n            \"FL126\"\n        ],\n        \"passengerId\": \"P004\",\n        \"seatNumber\": \"10A\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"personal\"\n    },\n    {\n        \"id\": \"B1004\",\n        \"flightId\": [\n            \"FL126\"\n        ],\n        \"passengerId\": \"P003\",\n        \"seatNumber\": \"7D\",\n        \"reservationStatus\": \"Cancelled\",\n        \"purpose\": \"business\"\n    }\n]  \n]\n</code></pre>"},{"location":"reference/operations/reservations-get-all-reservations/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully 404 Error Specified record not found ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/operations/reservations-update-by-id/","title":"Update reservation by ID","text":""},{"location":"reference/operations/reservations-update-by-id/#layout-page","title":"layout: page","text":""},{"location":"reference/operations/reservations-update-by-id/#method","title":"Method","text":"<pre><code>PATCH\n</code></pre> <p>The Patch request updates the reservation's travel type but does not change the other parameters in the <code>reservation</code> object.</p> <p>Note : After creating a reservation, a unique identifier (ID) is assigned. Provide the ID for the reservation in the base URL.</p>"},{"location":"reference/operations/reservations-update-by-id/#url","title":"URL","text":"<pre><code>{server_url}/reservations/{id}\n</code></pre> <p>In the URL, specify the ID of the reservation that you want to modify. To find the reservation id, do a get all reservations.</p> Parameter name Type Description <code>id</code> number (Required) The reservations's unique record ID. <p>For example:</p> <pre><code>{server_url}/reservations/{df6e}\n</code></pre>"},{"location":"reference/operations/reservations-update-by-id/#params","title":"Params","text":"<p>None</p>"},{"location":"reference/operations/reservations-update-by-id/#request-headers","title":"Request headers","text":"<p>None</p>"},{"location":"reference/operations/reservations-update-by-id/#request-body","title":"Request body","text":"<p>To add a travel type or update the status of your booking for an existing reservation, you can have the following in the request.</p> <pre><code>{\n    \"purpose\": \"business\",\n    \"reservationStatus\": \"Booked\" \n}\n</code></pre>"},{"location":"reference/operations/reservations-update-by-id/#return-body","title":"Return body","text":"<p>The following response shows a successful update for the reservation ID = df6e.</p> <pre><code>{\n    \"id\": \"df6e\",\n    \"flightId\": [\n        \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\",\n    \"purpose\": \"business\",\n    \"reservationStatus\": \"Booked\"\n}\n</code></pre>"},{"location":"reference/operations/reservations-update-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Removes the user and returns an empty response. 404 Error Specified user record not found. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/resource/flights/","title":"<code>Flights</code> resource","text":"<p>Base endpoint:</p> <pre><code>{local_url}/flights\n</code></pre> <p>Contains information about the flights of the service.</p>"},{"location":"reference/resource/flights/#resource-properties","title":"Resource properties","text":"<p>Sample <code>flights</code> resource</p> <pre><code> {\n    \"id\": \"FL126\",\n    \"flightNumber\": \"OA321\",\n    \"airline\": \"Oceanic Airlines\",\n    \"origin\": \"MIA\",\n    \"destination\": \"JFK\",\n    \"departureTime\": \"2024-06-02T12:00:00Z\",\n    \"arrivalTime\": \"2024-06-02T15:00:00Z\"\n  }\n</code></pre> Property name Type Description <code>id</code> number The flight's id. <code>flightNumber</code> string The flight's number. <code>airline</code> string The airline name. <code>origin</code> string The starting location of the airline. <code>destination</code> string The final destination of the airline. <code>departureTime</code> dateTime Time of departure. <code>arrivalTime</code> dateTime Time of arrival."},{"location":"reference/resource/passengers/","title":"<code>Passenger</code> resource","text":"<p>Base endpoint:</p> <pre><code>{base_url}/users\n</code></pre> <p>Contains information about the passengers of the service.</p> <p>To have a reservation in the service, the passenger must be added to the service first.</p>"},{"location":"reference/resource/passengers/#resource-properties","title":"Resource properties","text":"<p>Sample <code>passenger</code> resource</p> <pre><code> {\n    \"id\": \"P004\",\n    \"firstName\": \"Liu\",\n    \"lastName\": \"Wei\",\n    \"dob\": \"1978-12-01\",\n    \"passportNumber\": \"D98765432\",\n    \"nationality\": \"China\"\n  }\n</code></pre> Property name Type Description <code>id</code> number The passenger's id. <code>firstName</code> string The passenger's first  name. <code>lastName</code> string The passenger's last name. <code>dob</code> string The passenger's date of birth. <code>passportNumber</code> number The passenger's unique passport record number. <code>nationality</code> string The passenger's nationality."},{"location":"reference/resource/passengers/#operations","title":"Operations","text":"<p>The <code>passengers</code> resource supports these operations.</p>"},{"location":"reference/resource/passengers/#read-get","title":"READ (GET)","text":"<ul> <li>Get all passengers</li> </ul>"},{"location":"reference/resource/passengers/#create-post","title":"CREATE (POST)","text":"<ul> <li>Create a passenger</li> </ul>"},{"location":"reference/resource/passengers/#update-putpatch","title":"UPDATE (PUT/PATCH)","text":"<ul> <li>Update email by passenger ID</li> </ul>"},{"location":"reference/resource/passengers/#delete","title":"DELETE","text":"<ul> <li>Delete passenger by ID</li> </ul>"},{"location":"reference/resource/reservation/","title":"<code>Reservation</code> resource","text":"<p>Base endpoint:</p> <pre><code>{local_url}/reservations\n</code></pre> <p>Contains information about the users of the service.</p> <p>To have a task in the service, the user must be added to the service first.</p>"},{"location":"reference/resource/reservation/#reservation-properties","title":"Reservation properties","text":"<p>Sample <code>reservations</code> resource</p> <pre><code>  {\n    \"id\": \"B1004\",\n    \"flightId\": [\n      \"FL126\"\n    ],\n    \"passengerId\": \"P003\",\n    \"seatNumber\": \"7D\",\n    \"reservationStatus\": \"Cancelled\",\n    \"purpose\": \"business\"\n  }\n</code></pre> Property name Type Description <code>id</code> string (Required) Unique identifier of the reservation. <code>flightId</code> string (Required) Unique identifier of the flight. <code>passengerId</code> string (Required) The passenger's Id. <code>seatNumber</code> string (Required) The passenger's seat information. <code>reservationStatus</code> string (Optional) The status of the booking. <code>purpose</code> string (Optional) Type of travel."},{"location":"reference/resource/reservation/#operations","title":"Operations","text":"<p>The <code>reservations</code> resource supports these operations.</p>"},{"location":"reference/resource/reservation/#read-get","title":"READ (GET)","text":"<ul> <li>Get all reservarions</li> </ul>"},{"location":"reference/resource/reservation/#create-post","title":"CREATE (POST)","text":"<ul> <li>Create reservarions</li> </ul>"},{"location":"reference/resource/reservation/#update-putpatch","title":"UPDATE (PUT/PATCH)","text":"<ul> <li>Update travel type by reservation ID</li> </ul>"},{"location":"reference/resource/reservation/#delete","title":"DELETE","text":"<ul> <li>Delete reservation by ID</li> </ul>"},{"location":"tutorials/all-tutorials/","title":"Get started with our tutorials","text":"<ul> <li>Show all reservations</li> <li>Add reservation</li> <li>Delete reservation</li> <li>Update reservation</li> </ul>"},{"location":"tutorials/del-res/","title":"Delete reservation by ID","text":"<p>This resource updates a reservation at a time.</p>"},{"location":"tutorials/del-res/#prerequisites","title":"Prerequisites","text":"<ol> <li>The <code>json-server</code> is up and running.</li> <li>You have installed the Postman Desktop application.</li> </ol> <p>If you need help with the prerequisites, refer to the before-you-start-a-tutorial section.</p>"},{"location":"tutorials/del-res/#about-this-task","title":"About this task","text":"<p>To update an existing reservation follow these steps:</p> <ol> <li>Open Postman.</li> <li>Select DELETE method.</li> <li>Enter <code>{{baseUrl}}/reservations/id</code>. Specify the ID of the existing reservation that you want to delete: <code>{{baseUrl}}/reservations/df6e</code></li> <li>Click Send.</li> </ol>"},{"location":"tutorials/del-res/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully 404 Error Specified record not found ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"tutorials/del-res/#related-information","title":"Related information","text":"<ul> <li>Error handling</li> </ul>"},{"location":"tutorials/new-reservation/","title":"Add a new reservation","text":"<p>This resource retrieves all the reservations in the source.</p>"},{"location":"tutorials/new-reservation/#prerequisites","title":"Prerequisites","text":"<ol> <li>The <code>json-server</code> is up and running.</li> <li>You have installed the Postman Desktop application.</li> <li>The Postman request collection setup is complete.</li> </ol> <p>If you need help with the prerequisites, refer to the before-you-start-a-tutorial section.</p>"},{"location":"tutorials/new-reservation/#about-this-task","title":"About this task","text":"<p>To add a new reservation follow these steps:</p> <ol> <li>Open Postman.</li> <li>Select POST method.</li> <li>Enter <code>{{baseUrl}}/reservations</code>.</li> <li>In the Body tab, create the following properties for a new reservation and submit your request:</li> </ol> Property name Type Description <code>id</code> string (Required) Unique identifier of the reservation. <code>flightId</code> string (Required) Unique identifier of the flight. <code>passengerId</code> string (Required) The passenger's Id. <code>seatNumber</code> string (Required) The passenger's seat information. <code>reservationStatus</code> string (Optional) The status of the booking. <code>purpose</code> string (Optional) Type of travel. <p>Here's how a sample request may look like, you can :</p> <pre><code>  {\n\n    \"flightId\": [\n      \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\"\n\n\n  }\n ```\n\nHere's a sample response: of all reservations:\n\n```json\n{\n    \"id\": \"df6e\",\n    \"flightId\": [\n        \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\"\n}\n</code></pre> <p>NOTE: The response automatically generates an \"id\" for each new reservation. This id is unique and associated with the passenger's information.</p>"},{"location":"tutorials/new-reservation/#related-information","title":"Related information","text":"<ul> <li>Error handling</li> </ul>"},{"location":"tutorials/new-reservation/#next-step","title":"Next step","text":"<ul> <li>Show all reservations</li> </ul>"},{"location":"tutorials/show-all-res/","title":"Show all reservations","text":"<p>This resource retrieves all the reservations in the source. </p>"},{"location":"tutorials/show-all-res/#prerequisites","title":"Prerequisites","text":"<ol> <li>The <code>json-server</code> is up and running.</li> <li>You have installed the Postman Desktop application. </li> </ol> <p>If you need help with the prerequisites, refer to the before-you-start-a-tutorial section.</p>"},{"location":"tutorials/show-all-res/#about-this-task","title":"About this task","text":"<p>To show all reservations:</p> <ol> <li>Open Postman. </li> <li>Select the GET method.</li> <li>Enter <code>{{baseUrl}}/reservations</code>.</li> <li>Click Send.</li> </ol> <p>Here's a sample of all reservations:</p> <pre><code>[\n    {\n        \"id\": \"B1001\",\n        \"flightId\": [\n            \"FL123\"\n        ],\n        \"passengerId\": \"P001\",\n        \"seatNumber\": \"12A\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"personal\"\n    },\n    {\n        \"id\": \"B1002\",\n        \"flightId\": [\n            \"FL124\"\n        ],\n        \"passengerId\": \"P001\",\n        \"seatNumber\": \"18B\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"business\"\n    },\n    {\n        \"id\": \"B1003\",\n        \"flightId\": [\n            \"FL125\"\n        ],\n        \"passengerId\": \"P002\",\n        \"seatNumber\": \"22C\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"business\"\n    },\n    {\n        \"id\": \"B1005\",\n        \"flightId\": [\n            \"FL126\"\n        ],\n        \"passengerId\": \"P004\",\n        \"seatNumber\": \"10A\",\n        \"reservationStatus\": \"Confirmed\",\n        \"purpose\": \"personal\"\n    },\n    {\n        \"id\": \"B1004\",\n        \"flightId\": [\n            \"FL126\"\n        ],\n        \"passengerId\": \"P003\",\n        \"seatNumber\": \"7D\",\n        \"reservationStatus\": \"Cancelled\",\n        \"purpose\": \"business\"\n    }\n]\n</code></pre>"},{"location":"tutorials/show-all-res/#related-information","title":"Related information","text":"<ul> <li>Error handling</li> </ul>"},{"location":"tutorials/show-all-res/#next-step","title":"Next step","text":"<ul> <li>Update reservation</li> </ul>"},{"location":"tutorials/update-reservation/","title":"Update reservation by ID","text":"<p>This resource updates a reservation at a time.</p>"},{"location":"tutorials/update-reservation/#prerequisites","title":"Prerequisites","text":"<ol> <li>The <code>json-server</code> is up and running.</li> <li>You have installed the Postman Desktop application.</li> </ol> <p>If you need help with the prerequisites, refer to the before-you-start-a-tutorial section.</p>"},{"location":"tutorials/update-reservation/#about-this-task","title":"About this task","text":"<p>To update an existing reservation follow these steps:</p> <ol> <li>Open Postman.</li> <li>Select PATCH method.</li> <li>Enter <code>{{baseUrl}}/reservations/id</code>. Specify the ID for which you want to update the existing properties: <code>{{baseUrl}}/reservations/df6e</code></li> <li>In the Body tab, create ONLY the properties you want to modify for that reservation and submit your request.</li> </ol> <p>Here's how a sample request may look like, you can :</p> <pre><code>  {\n    \"purpose\": \"business\",\n    \"reservationStatus\": \"Booked\" \n}\n ```\n\nHere's a sample response for the id = df6e.\n\n```json\n{\n    \"id\": \"df6e\",\n    \"flightId\": [\n        \"FL126\"\n    ],\n    \"passengerId\": \"P0031\",\n    \"seatNumber\": \"10D\",\n    \"purpose\": \"business\",\n    \"reservationStatus\": \"Booked\"\n}\n</code></pre>"},{"location":"tutorials/update-reservation/#related-information","title":"Related information","text":"<ul> <li>Error handling</li> </ul>"},{"location":"tutorials/update-reservation/#next-step","title":"Next step","text":"<ul> <li>Delete reservation</li> </ul>"}]}